name: Test & Linters & Deploy
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cache
        id: valid-cache
        uses: actions/cache@v2
        with:
          key: poetry-${{ hashFiles('poetry.lock') }}
          path: |
            /home/runner/.poetry
            ${{ github.workspace }}/.venv
            ${{ github.workspace }}/requirements.txt
      - name: Install poetry
        if: steps.valid-cache.outputs.cache-hit != 'true'
        run: |
          pip install -U pip setuptools wheel
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - name: Install dependencies
        if: steps.valid-cache.outputs.cache-hit != 'true'
        run: |
          python3 -m venv .venv
          ~/.poetry/bin/poetry install
      - name: Export requirements.txt
        if: steps.valid-cache.outputs.cache-hit != 'true'
        run: |
          ~/.poetry/bin/poetry export --without-hashes -f requirements.txt > requirements.txt

  linters:
    name: Linting
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cache
        id: valid-cache
        uses: actions/cache@v2
        with:
          key: poetry-${{ hashFiles('poetry.lock') }}
          path: |
            /home/runner/.poetry
            ${{ github.workspace }}/.venv
            ${{ github.workspace }}/requirements.txt
      - name: Run Isort
        run: |
          ~/.poetry/bin/poetry run isort . --check
      - name: Run Flake8
        run: |
          ~/.poetry/bin/poetry run flake8 paymentify tests
      - name: Run Black
        run: |
          ~/.poetry/bin/poetry run black --check paymentify tests

  tests:
    name: Tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cache
        id: valid-cache
        uses: actions/cache@v2
        with:
          key: poetry-${{ hashFiles('poetry.lock') }}
          path: |
            /home/runner/.poetry
            ${{ github.workspace }}/.venv
            ${{ github.workspace }}/requirements.txt
      - name: Run tests and upload coverage
        run: |
          ~/.poetry/bin/poetry run pytest --cov=paymentify -v
          ~/.poetry/bin/poetry run codecov

  deploy:
    name: Deploy
    needs: tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    if: github.ref == 'refs/heads/master'
    env:
      STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      SERVICE_NAME: paymentify
      GCP_REGION: europe-west1
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCP_CICD_SA }}
          project_id: ${{ secrets.GCP_PROJECT }}
      - name: Build
        run: |-
          gcloud builds submit \
            --quiet \
            --tag "gcr.io/${GCP_PROJECT}/${SERVICE_NAME}:${GITHUB_SHA}"
      - name: Deploy
        run: |-
          gcloud run deploy "${SERVICE_NAME}" \
            --quiet \
            --region ${GCP_REGION} \
            --image "gcr.io/${GCP_PROJECT}/${SERVICE_NAME}:${GITHUB_SHA}" \
            --set-env-vars=DYNACONF_STRIPE_API_KEY=${STRIPE_API_KEY} \
            --set-env-vars=GIT_HASH=${GITHUB_SHA} \
            --platform "managed" \
            --allow-unauthenticated
